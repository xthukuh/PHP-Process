<?php

namespace xthukuh;

use Exception;

class Process
{
	/**
	 * Default options (https://www.php.net/manual/en/function.proc-open.php).
	 * 
	 * @var array
	 */
	protected $default_options = [
		'cwd' => null,              //string proc_open working directory (proc_open: $cwd).
		'getcwd' => true,           //use getcwd as default cwd.
		'realpath' => true,         //evaluate cwd realpath.
		'descriptor_spec' => null,  //array file descriptors (see $default_descriptor_spec doc).
		'env_vars' => null,         //array environment variables (proc_open: $env_vars).
		'other_options' => null,    //array other options (see $default_win_options doc).
	];

	/**
	 * Default descriptor spec (proc_open: descriptor_spec).
	 * 
	 * @var array
	 */
	protected $default_descriptor_spec = [
		0 => ['pipe', 'r'], //stdin
		1 => ['pipe', 'w'], //stdout
		2 => ['pipe', 'w'], //stderr
	];

	/**
	 * Default windows only options (proc_open: other_options).
	 * 
	 * @var array
	 */
	protected $default_win_options = [
		'suppress_errors' => false,       //suppresses errors generated by this function when it's set to true
		'bypass_shell' => false,          //bypass cmd.exe shell when set to true
		'blocking_pipes' => false,        //force blocking pipes when set to true
		'create_process_group' => false,  //allow the child process to handle CTRL events when set to true
		'create_new_console' => false,    //the new process has a new console, instead of inheriting its parent's console
	];

	/**
	 * Instance unique ID.
	 * 
	 * @var string
	 */
	private $_id;

	/**
	 * Process working directory.
	 * 
	 * @var string
	 */
	private $_cwd;

	/**
	 * Process command.
	 * 
	 * @var string
	 */
	private $_cmd;

	/**
	 * Process command key (md5 hash).
	 * 
	 * - md5($this -> _cmd . '-' . $this -> _cwd);
	 * 
	 * @var string
	 */
	private $_key;

	/**
	 * Process current command line.
	 * 
	 * @var string
	 */
	private $_ccmd;

	/**
	 * Process options (See protected $default_options doc).
	 * 
	 * - Note: When running in background, the option 'descriptor_spec'
	 * - is ignored and '$default_descriptor_spec' used instead.
	 * 
	 * @var array
	 */
	private $_options;

	/**
	 * Process file descriptors (See protected $default_descriptor_spec doc).
	 * 
	 * @var array
	 */
	private $_descriptor_spec;

	/**
	 * Process environment variables. (See protected $default_options doc).
	 * 
	 * @var array
	 */
	private $_env_vars;

	/**
	 * Process other options. (See protected $default_options doc).
	 * 
	 * @var array
	 */
	private $_other_options;

	/**
	 * Process resource (proc_open result).
	 * 
	 * @var resource
	 */
	private $_process;

	/**
	 * Resource pipes (proc_open: $pipes).
	 * 
	 * @var array
	 */
	private $_pipes;

	/**
	 * Process error.
	 * 
	 * @var string
	 */
	private $_error;

	/**
	 * Process parent pid.
	 * 
	 * @var int
	 */
	private $_ppid;

	/**
	 * Process child pid.
	 * 
	 * @var int
	 */
	private $_cpid;

	/**
	 * Process current pid.
	 * 
	 * - The parent pid (self -> ppid) is used except when running in
	 *   background where child pid (self -> cpid) is used.
	 * 
	 * @var int
	 */
	private $_pid;

	/**
	 * Process close exit result code (proc_close).
	 * 
	 * @var int
	 */
	private $_exit;

	/**
	 * Open status.
	 * 
	 * @var bool
	 */
	private $_open;

	/**
	 * Running in background.
	 * 
	 * @var bool
	 */
	private $_background;

	/**
	 * New instance.
	 * 
	 * @param  string  $cmd      - Process command.
	 * @param  array   $options  - Process options.
	 * @return self
	 */
	public function __construct(string $cmd=null, array $options=null){
		$this -> _id = static::uid();
		$this -> _cmd = is_string($cmd) && ($cmd = trim(str_replace(urldecode('%C2%A0'), ' ', $cmd))) ? $cmd : null;
		$key = $val = null;
		$opts = ['descriptor_spec' => $this -> default_descriptor_spec];
		if (is_array($options) && !empty($options)){
			if (isset($options[$key = 'interactive']) && $options[$key]) $opts[$key] = true;
			if (isset($options[$key = 'cwd']) && is_string($val = $options[$key]) && ($val = trim($val))) $opts[$key] = $val;
			if (isset($options[$key = 'getcwd'])) $opts[$key] = (bool) $options[$key];
			if (isset($options[$key = 'realpath'])) $opts[$key] = (bool) $options[$key];
			if (isset($options[$key = 'descriptor_spec']) && is_array($val = $options[$key])){
				$tmp = []; $item = null;
				foreach ($val as $item){
					if (is_array($item) && !empty($item)) $tmp[] = $item;
				}
				if (!empty($tmp)) $opts[$key] = array_replace($opts[$key], $tmp);
				unset($item, $tmp);
			}
			if (isset($options[$key = 'env_vars']) && is_array($val = $options[$key]) && !empty($val)) $opts[$key] = $val;
			if (isset($options[$key = 'other_options']) && is_array($val = $options[$key]) && !empty($val)) $opts[$key] = $val;
		}
		$this -> _options = array_replace($this -> default_options, $opts);
		if (
			isset($this -> _options[$key = 'cwd']) &&
			($val = isset($this -> _options['realpath']) && $this -> _options['realpath'] ? realpath($this -> _options[$key]) : trim($this -> _options[$key])) &&
			file_exists($val) && is_dir($val)
		) $this -> _cwd = $val;
		else $this -> _cwd = isset($this -> _options[$key = 'getcwd']) && $this -> _options[$key] ? getcwd() : null;
		$this -> _key = $this -> _cmd ? md5($this -> _cmd . '-' . $this -> _cwd) : null;
		unset($opts, $key, $val);
		$this -> reset();
	}

	/**
	 * Property getter.
	 * 
	 * - Allows public access (read only) of private properties.
	 * - i.e. $instance -> pid = $this -> _pid;
	 * 
	 * @param  string  $name
	 * @return mixed
	 */
	public function __get(string $name){
		if (property_exists($this, $prop = "$name")) return $this -> {$prop};
		if (property_exists($this, $prop = "_$name")) return $this -> {$prop};
		throw new Exception(sprintf('Property name "%s" is not available.', $name));
	}

	/**
	 * Reset instance props.
	 * 
	 * @return void
	 */
	private function reset(){
		if ($this -> _open) $this -> close(1);
		$this -> _ccmd = null;
		$this -> _process = null;
		$this -> _descriptor_spec = null;
		$this -> _env_vars = null;
		$this -> _other_options = null;
		$this -> _pipes = null;
		$this -> _error = null;
		$this -> _ppid = null;
		$this -> _cpid = null;
		$this -> _pid = null;
		$this -> _exit = null;
		$this -> _open = false;
		$this -> _background = false;
	}

	/**
	 * Parse cmd string.
	 * 
	 * - Normalizes process command line format.
	 * - result array [
	 *    'cmd' => null,     //(string) parsed command line string
	 *    'cmd_bg' => null,  //(string) parsed command line (to run in background)
	 *    'stdout' => null,  //(string) parsed command redirect stdout path
	 *    'stderr' => null,  //(string) parsed command redirect stderr path
	 *    'stderr_merge' => false,  //(bool) whether command has 2>&1
	 * ];
	 * 
	 * @param  string  $cmd  - Command line string.
	 * @param  bool    $win  - Parse results for windows platform.
	 * @return array
	 */
	private function parse(string $cmd, bool $win=false){
		static $_get_output, $_quote_restore;
		$s = trim($cmd);
		$stdout = $stderr = $tmp = $stderr_merge = null;
		$q = -1; $quote = [];
		if (strpos($s, '\'') !== false || strpos($s, '"') !== false){
			$s = preg_replace_callback('/\'([^\']+)\'/', function($match) use (&$quote, &$q){
				$q ++;
				$quote[$tmp = '__' . $q . '__'] = $match[0];
				return $tmp;
			}, $s);
			$s = preg_replace_callback('/"([^"]+)"/', function($match) use (&$quote, &$q){
				$q ++;
				$quote[$tmp = '__' . $q . '__'] = $match[0];
				return $tmp;
			}, $s);
			if (!$_quote_restore) $_quote_restore = function($str, $q, $quote){
				$i = $key = null;
				for ($i = $q; $i >= 0; $i --){
					$key = '__' . $i . '__';
					$str = str_replace($key, $quote[$key], $str);
				}
				unset($i, $key);
				return $str;
			};
		}
		if (strpos($s, '>') !== false){
			$stdout_append = 0;
			$stderr_append = 0;
			if (preg_match('/(1| )\>\>/', $s)) $stdout_append = 1;
			if (preg_match('/2\>\>/', $s)) $stderr_append = 1;
			$s = preg_replace('/\>+/', '>', $s);
			$s = preg_replace('/([^\>]+\=[12])\>/', '$1 >', $s);
			$s = preg_replace('/([^12]+)\>/', '$1-1>', $s, 1);
			$s = preg_replace('/([^12]+)\>/', '$1-2>', $s, 1);
			$s = preg_replace('/-([12])\>/', '$1>', $s, 1);
			$s = preg_replace('/&([12])\>/', '$1>', $s);
			$s = preg_replace('/([^\>]+)([12])\>/', '$1 $2>', $s);
			$s = preg_replace('/[ ]+/', ' ', $s);
			$s = preg_replace('/\s*&([12])/', '&$1', $s);
			if (strpos($s, '2>&1') !== false){
				$stderr_merge = 1;
				$s = trim(str_replace('2>&1', '', $s));
			}
			if (!$_get_output) $_get_output = function($s, $w, $e=0){
				$a = $e ? 2 : 1;
				$b = $e ? 1 : 2;
				$p = $x = $d = $v = null;
				if (!(($p = strpos($s, "$a>")) !== false && ($p += 2))) return;
				if (($p = strpos($s, "$a>")) !== false && ($p += 2)){
					$x = ($x = strpos($s, "$b>", $p)) !== false ? $x : (($x = strpos($s, '>', $p)) !== false ? $x : -1);
					$v = ($d = $x < 0 ? 0 : $x - $p) ? substr($s, $p, $d) : substr($s, $p);
					if (!strlen($v = trim($v))) $v = null;
					elseif (!preg_match(sprintf('/^[^%s]*$/', preg_quote('*?"<>|:&', '/')), $v)) $v = null;
					elseif (in_array(strtolower($v), ['nul', 'null', '/dev/null'])) $v = $w ? 'nul' : '/dev/null';
				}
				unset($a, $b, $p, $x, $d);
				return $v;
			};
			$stdout = ($tmp = $_get_output($s, $win)) ? '' . ($stdout_append ? '>>' : '>') . $tmp : null;
			$stderr = ($tmp = $_get_output($s, $win, 1)) ? '2' . ($stderr_append ? '>>' : '>') . $tmp : null;
			unset($stdout_append, $stderr_append);
			$s = preg_match('/^(.+?(?=[0-9]*\>))/', $s, $matches) && count($matches) ? trim($matches[0]) : trim($s);
		}
		if ($q > -1 && !empty($quote) && $_quote_restore){
			$s = $_quote_restore($s, $q, $quote);
			if ($stdout) $stdout = $_quote_restore($stdout, $q, $quote);
			if ($stderr) $stderr = $_quote_restore($stderr, $q, $quote);
		}
		$bg = $s;
		if ($stdout){
			$s .= ($tmp = ' ' . $stdout);
			$bg .= $tmp;
		}
		else $bg .= ' >' . ($win ? 'nul' : '/dev/null');
		if ($stderr){
			$s .= ($tmp = ' ' . $stderr);
			$bg .= $tmp;
		}
		else {
			$s .= $stderr_merge ? ' 2>&1' : '';
			$bg .= ' 2>' . ($stderr_merge ? '&1' : ($win ? 'nul' : '/dev/null'));
		}
		if ($win){
			if (preg_match($tmp = '/^(start\s*(\/b)?)((?![a-z]).+)$/i', $bg)) $bg = trim(preg_replace('/\s+/', ' ', preg_replace($tmp, '$3', $bg)));
			$bg = 'start /b ' . $bg . ' &';
		}
		else $bg .= ' & echo $!';
		unset($tmp, $q, $quote);
		return [
			'cmd' => $s,
			'cmd_bg' => $bg,
			'stdout' => $stdout,
			'stderr' => $stderr,
			'stderr_merge' => (bool) $stderr_merge,
		];
	}

	/**
	 * Open process (proc_open).
	 * 
	 * When running in background ($background = true):
	 * - Child process continues running unless terminated/killed (even after default close [$this -> close()]).
	 * - Windows only has available pipe: [0 => stdin] (non-blocking not supported).
	 *   Custom option ['descriptor_spec' => [...]] is ignored.
	 * - The command line string is formatted with "start /b ... >nul 2>&1 &" (Windows) or "... >/dev/null 2>&1 & echo &!" (Linux/Unix).
	 *   Avoid using "start /b ... &" or "... & echo &!" in your command.
	 * - Unix/Linux output buffer is the child process pid.
	 *   No need to get output buffer (use $this -> cpid).
	 * 
	 * When callback is callable ($callback(Process $this)):
	 * - Callback is called after successful process open.
	 * - Shutdown listener is registered before call (shutdown kills unclosed instance).
	 * - If callback returns false;     - process is terminated/killed.
	 * - Else If callback returns true; - process is kept open (to be closed manually).
	 * - Else; - process is closed by default ($this -> close()).
	 * 
	 * @param  bool      $background  - Enable running in background.
	 * @param  callable  $callback    - Closure/Method open callback [Process $this].
	 * @return bool
	 */
	public function open(bool $background=false, $callback=null){
		static $_failure;
		$this -> reset();
		$this -> _background = (bool) $background;
		$callback = is_callable($callback) ? $callback : null;
		if (!$_failure) $_failure = function($err, $reset=1){
			$err = sprintf('Open%s process %s. (cmd: %s)', $this -> _background ? ' background' : '', $err, $this -> _ccmd);
			if ($reset) $this -> reset();
			$this -> _error = $err;
			return false;
		};
		
		if (!($cmd = $this -> _cmd)) return $_failure('cmd is undefined', 0);
		if (!is_array($this -> _options)) return $_failure('options are undefined', 0);
		
		$is_win = static::is_win();
		$parse = $this -> parse($cmd, $is_win);
		$this -> _ccmd = $parse['cmd'];
		$this -> _env_vars = $this -> _options['env_vars'];
		$this -> _other_options = $this -> _options['other_options'];
		$this -> _descriptor_spec = $this -> _options['descriptor_spec'];
		if ($this -> _background){
			$this -> _ccmd = $parse['cmd_bg'];
			if ($is_win) $this -> _descriptor_spec = array_slice($this -> default_descriptor_spec, 0, 1);
		}
		unset($parse);
		
		$this -> _process = proc_open(
			$this -> _ccmd,
			$this -> _descriptor_spec,
			$this -> _pipes,
			$this -> _cwd,
			$this -> _env_vars,
			$this -> _other_options
		);
		
		if (!is_resource($this -> _process)) return $_failure('failure');
		$this -> _open = true;
		
		if (!(is_array($this -> _pipes) && count($this -> _pipes))) return $_failure('has invalid resource pipes');
		if (!(!empty($this -> status($pid, $running)) && $pid)) return $_failure('get status pid failure');

		$this -> _ppid = $pid;
		
		if ($this -> _background){
			if (!($pid = static::child($pid))) return $_failure('[' . $this -> _ppid . '] get child pid failure');
			$this -> _background = $background;
			$this -> _cpid = $pid;
		}

		$this -> _pid = $pid;
		
		$res = null;
		if ($callback){
			register_shutdown_function([$this, 'shutdown']);
			try {
				$res = $callback($this);
			}
			catch (Exception $e){
				return $_failure('callback exception: ' . $e -> getMessage());
			}
		}
		if ($res === false) $this -> close(1, $this -> _pid);
		elseif ($res !== true) $this -> close();

		return true;
	}

	/**
	 * Close process (proc_terminate, proc_close).
	 * 
	 * - If running in background, proc_terminate() is used.
	 * 
	 * @param  bool  $kill      - Kill running process.
	 * @param  int   $kill_pid  - Kill process pid.
	 * @return int|null         - Exit result code (proc_close).
	 */
	public function close(bool $kill=false, int $kill_pid=null){
		$this -> status($pid, $running);
		if ($kill){
			$kill_pid = is_integer($kill_pid) && $kill_pid > 0 ? $kill_pid : $pid;
			if (!(is_integer($kill_pid) && $kill_pid > 0)) $kill_pid = $this -> _pid;
			static::kill($kill_pid);
		}
		if (is_array($this -> _pipes)){
			foreach ($this -> _pipes as &$pipe){
				if (is_resource($pipe)) fclose($pipe);
			}
		}
		$exit = is_resource($this -> _process) ? proc_close($this -> _process) : $this -> _exit;
		$this -> _exit = is_integer($exit) ? ($exit <= 0 ? 0 : $exit) : null;
		$this -> _process = null;
		$this -> _pipes = null;
		$this -> _open = false;
		return $exit;
	}

	/**
	 * Get pipe resource.
	 * 
	 * @param  int  $index - Pipe resource index.
	 * @return resource|null
	 */
	public function pipe(int $index=null){
		return is_integer($index) && is_array($this -> _pipes) && isset($this -> _pipes[$index]) && is_resource($pipe = &$this -> _pipes[$index]) ? $pipe : null;
	}

	/**
	 * Process shutdown handler.
	 * 
	 * @return void
	 */
	public function shutdown(){
		if ($this -> _open) $this -> close(1);
	}

	/**
	 * Process is running.
	 * 
	 * @param  int  $pid  - Running pid.
	 * @return bool
	 */
	public function running(int &$pid=null){
		$this -> status($pid, $running);
		if ($running) return true;
		$pid = $val = null;
		if ($this -> _open && is_integer($val = $this -> _ppid) && static::exists($val)) $pid = $val;
		elseif (is_integer($val = $this -> _cpid) && static::exists($val)) $pid = $val;
		unset($val);
		return !is_null($pid);
	}

	/**
	 * Get process status (proc_get_status).
	 * 
	 * @param  int  $pid      - Process pid.
	 * @param  int  $running  - Process running (1|0).
	 * @return array
	 */
	public function status(int &$pid=null, int &$running=null){
		$status = is_resource($this -> _process) && is_array($status = proc_get_status($this -> _process)) ? $status : [];
		$pid = isset($status['pid']) && is_integer($pid = $status['pid']) && $pid > 0 ? $pid : null;
		$running = (int) (isset($status['running']) && $status['running']);
		return $status;
	}

	/**
	 * Get output buffer.
	 * 
	 * - Note: If callback is callable, output buffer is not returned but instead used as the callback argument.
	 * - See static::buffer() doc.
	 * 
	 * @param  callable  $callback  - Closure/Method (argument: [string $buffer]) buffer callback.
	 * @param  int       $print     - Print output buffer mode.
	 * @param  int       $len       - Output buffer read (fgets) length.
	 * @return string|null
	 */
	public function output($callback=null, int $print=0, int $len=null){
		if (!(is_resource($this -> _process) && is_array($this -> _pipes) && isset($this -> _pipes[1]))) return null;
		$output = null;
		$callback = is_callable($callback) ? $callback : null;
		static::buffer($this -> pipe(1), function($buffer) use (&$callback, &$output){
			if (is_null($output)) $output = '';
			if ($callback) return $callback($buffer);
			else $output .= $buffer;
		}, [
			'print' => $print,
			'length' => $len,
			'fgets_timeout' => 0,
		]);
		return $output;
	}

	/**
	 * Get unique ID (uniqid).
	 * 
	 * @return string
	 */
	public static function uid(){
		$m = microtime(1);
		return sprintf('%8x%05x', $n = floor($m), ($m - $n) * (10 ** 10));
	}

	/**
	 * Check if platform is Windows.
	 * 
	 * @param  string  $uname
	 * @return bool
	 */
	public static function is_win(string &$uname=null){
		static $_is_win, $_uname;
		if (!is_bool($_is_win)) $_is_win = stripos($_uname = php_uname('s'), 'win') > -1;
		$uname = $_uname;
		return $_is_win;
	}

	/**
	 * Get child process pid from parent pid.
	 * 
	 * @param  int    $pid   - Parent process pid.
	 * @param  array  $pids  - Child process pids.
	 * @return int|null
	 */
	public static function child(int $pid=null, array &$pids=null){
		$pids = [];
		if (!(is_integer($pid) && ($pid > 0))) return null;
		$seen = 0;
		$cmd = sprintf(($is_win = static::is_win()) ? 'wmic process get parentprocessid,processid | find "%s"' : 'ps afx --ppid %s', $pid);
		$pids = array_values(array_filter(array_map(function($val) use (&$is_win, &$cmd){
			if (!$is_win){
				if (strpos($val, $cmd) !== false) return null;
				if (!preg_match('/^\s*([0-9]+)\s*/', $val, $val)) return null;
				$val = $val[1];
			}
			else $val = trim($val);
			return $val && is_numeric($val) && ($val = (int) $val) > 0 ? $val : null;
		}, explode($is_win ? ' ' : "\n", $out = trim(shell_exec($cmd)))), function($val) use (&$pid, &$seen){
			if (!$val) return false;
			if ($val === $pid){
				$seen = 1;
				return false;
			}
			return $seen;
		}));
		unset($seen, $cmd, $is_win);
		return !empty($pids) ? $pids[0] : null;
	}

	/**
	 * Check if pid process exists.
	 * 
	 * @param  int  $pid
	 * @return bool
	 */
	public static function exists(int $pid=null){
		if (!(is_integer($pid) && ($pid > 0))) return false;
		return strpos(shell_exec(sprintf(static::is_win() ? 'tasklist /FI "PID eq %d" 2>&1' : 'ps -p %d -opid=,cmd= 2>&1', $pid)), (string) $pid) !== false;
	}

	/**
	 * Kill pid process.
	 * 
	 * @param  int  $pid
	 * @param  int  $killed  (null = error, 0 = process not found, 1 = process killed)
	 * @return bool
	 */
	public static function kill(int $pid=null, int &$killed=null){
		$killed = null;
		if (!(is_integer($pid) && ($pid > 0))) return false;
		$cmd = sprintf(($is_win = static::is_win()) ? 'taskkill /F /T /PID %s 2>&1' : 'kill -s 9 %s 2>&1', $pid);
		$out = exec($cmd);
		$killed = $out === false ? null : ((int)($is_win ? !(stripos($out, 'no tasks') !== false || stripos($out, 'not found') !== false) : stripos($out, 'no such process') === false));
		unset($cmd, $is_win, $out);
		return !is_null($killed);
	}

	/**
	 * Checks timeout from start time.
	 * 
	 * @param  float  $timeout  - Timeout seconds.
	 * @param  float  $start    - Start time seconds (microtime(1)).
	 * @param  float  $elapsed  - Seconds elapsed (microtime(1) - $start).
	 * @return bool
	 */
	static public function timed_out(float $timeout=null, float $start=null, float &$elapsed=null){
		$timeout = is_numeric($timeout) && ($timeout = (float) $timeout) >= 0 ? $timeout : 0;
		$start = is_numeric($start) ? (float) $start : 0;
		$elapsed = microtime(1) - $start;
		return $elapsed >= $timeout;
	}

	/**
	 * Stream resource fgets (if not feof) with timeout.
	 * 
	 * @param  resource  $pipe     - Stream resource.
	 * @param  int       $len      - Read length (default: 1024).
	 * @param  float     $timeout  - Socket timeout (default: ini_get('default_socket_timeout'))
	 * @return string|bool
	 */
	public static function ffgets($pipe, int $len=null, float $timeout=null){
		static $_safe_feof, $_safe_fgets;
		if (!is_resource($pipe)) return false;
		$len = is_integer($len) && $len > 0 ? $len : 1024;
		$timeout = is_numeric($timeout) && ($timeout = (float) $timeout) >= 0 ? $timeout : (float) ini_get('default_socket_timeout');
		if (!$_safe_feof) $_safe_feof = function($fp, &$start=null){
			$start = microtime(1);
			return is_resource($fp) ? feof($fp) : true;
		};
		$val = null;
		$start = null;
		while (!$_safe_feof($pipe, $start) && (!$timeout || !static::timed_out($timeout, $start))){
			$val = is_resource($pipe) ? fgets($pipe, $len) : false;
			break;
		}
		return is_string($val) ? $val : false;
	}

	/**
	 * Check if resource is seekable.
	 * 
	 * @param  resource  $pipe  - Stream resource.
	 * @param  array     $meta  - Meta data (stream_get_meta_data: [seekable, ])
	 * @return bool
	 */
	public static function seekable($pipe=null, array &$meta=null){
		$meta = is_resource($pipe) && is_array($meta = stream_get_meta_data($pipe)) ? $meta : [];
		return isset($meta['seekable']) && $meta['seekable'];
	}

	/**
	 * End output buffer.
	 * 
	 * @param  bool  $clean           - If true, use ob_end_clean() otherwise (false) use ob_end_flush().
	 * @param  bool  $implicit_flush  - Enable ob_implicit_flush flag.
	 * @return void
	 */
	public static function ob_end(bool $clean=true, bool $implicit_flush=true){
		while (ob_get_level()) ($clean ? ob_end_clean() : ob_end_flush());
		ob_implicit_flush($implicit_flush);
	}

	/**
	 * Buffer listener (fgets).
	 * 
	 * - Callback is called with argument: [string $buffer]
	 * 
	 * - Options config = [
	 *   'print' => 0,           - int print output buffer mode (0 = disabled, 1 = print only, 2 = ob_end_flush, ob_implicit_flush, print, 3 = ob_end_clean, ob_implicit_flush, print).
	 *   'pid' => null,          - int process pid (if read fails, aborts if is not running).
	 *   'seek' => null,         - int fseek offset.
	 *   'length' => 1024,       - int fgets length.
	 *   'delay_ms' => 500,      - int read loop delay milliseconds (used on read retry or seekable resource).
	 *   'fgets_timeout' => 5,   - float fgets socket timeout (seconds).
	 *   'retry_timeout' => 10,  - float read retry timeout (seconds).
	 * ];
	 * 
	 * - Abort values/reasons:
	 * ~ $abort = null - Read failure.
	 * ~ $abort = -3   - Read retry timed out.
	 * ~ $abort = -2   - Process closed (if options pid is provided).
	 * ~ $abort = -1   - Connection aborted.
	 * ~ $abort = 0    - Read (fgets) returned false.
	 * ~ $abort = 1    - Read (fgets) returned empty string.
	 * ~ $abort = 2    - Callback returned false.
	 * 
	 * @param  mixed     $pipe      - Stream resource handle | String file path.
	 * @param  callable  $callback  - Closure/Method buffer callback.
	 * @param  array     $options   - Buffer options (see config options above).
	 * @param  int       $abort     - Buffer abort cause (see abort reasons above).
	 * @param  string    $error     - Error message (set when result is false).
	 * @return bool
	 */
	public static function buffer($pipe=null, $callback=null, array $options=null, int &$abort=null, string &$error=null){
		static $default_options;
		$abort = null;
		$error = null;
		$fopen = 0;
		if (is_string($pipe) && ($path = trim($pipe))){
			$pipe = null;
			if (file_exists($path) && is_file($path)){
				$pipe = fopen($path, 'rb');
				if (!is_resource($pipe)){
					$error = 'Buffer file open failure. (' . $path . ')';
					return false;
				}
				$fopen = 1;
			}
			unset($path);
		}
		if (!is_resource($pipe)){
			$error = 'Buffer pipe resource is invalid.';
			return false;
		}
		if (!is_callable($callback)) $callback = null;
		if (!$default_options) $default_options = [
			'print' => 0,
			'pid' => null,
			'seek' => null,
			'length' => 1024,
			'delay_ms' => 500,
			'fgets_timeout' => 5,
			'retry_timeout' => 10,
		];
		if (is_array($options) && !empty($options)){
			$opts = [];
			if (array_key_exists($key = 'print', $options) && is_integer($val = $options[$key]) && in_array($val, [1, 2, 3])) $opts[$key] = $val;
			if (array_key_exists($key = 'pid', $options) && is_integer($val = $options[$key]) && $val > 0) $opts[$key] = $val;
			if (array_key_exists($key = 'seek', $options) && is_integer($val = $options[$key]) && $val >= 0) $opts[$key] = $val;
			if (array_key_exists($key = 'length', $options) && is_integer($val = $options[$key]) && $val > 0) $opts[$key] = $val;
			if (array_key_exists($key = 'delay_ms', $options) && is_integer($val = $options[$key]) && $val > 0) $opts[$key] = $val;
			if (array_key_exists($key = 'fgets_timeout', $options) && (is_null($val = $options[$key]) || is_numeric($val = $options[$key]) && ($val = (float) $val) >= 0)) $opts[$key] = $val;
			if (array_key_exists($key = 'retry_timeout', $options) && (is_null($val = $options[$key]) || is_numeric($val = $options[$key]) && ($val = (float) $val) >= 0)) $opts[$key] = $val;
			$options = array_replace($default_options, $opts);
			unset($val, $opts);
		}
		else $options = $default_options;
		$seekable = static::seekable($pipe);
		if ($seekable && is_integer($options['seek']) && fseek($pipe, $options['seek'])){
			if ($fopen) fclose($pipe);
			$error = 'Buffer pipe resource seek (' . $options['seek'] . ') failure.';
			return false;
		}
		$fail = 0;
		$closed = 0;
		$ignore_user_abort = ignore_user_abort();
		ignore_user_abort(1);
		if ($options['print'] === 2) static::ob_end(0, 1);
		elseif ($options['print'] === 3) static::ob_end();
		while (1){
			$buffer = static::ffgets($pipe, $options['length'], $options['fgets_timeout']);
			if (!strlen($buffer)){
				if (!$fail) $fail = microtime(1);
				elseif ($options['retry_timeout'] && self::timed_out($options['retry_timeout'], $fail)){
					$abort = -3;
					break;
				}
				if ($options['pid']){
					if ($closed){
						$abort = -2;
						break;
					}
					elseif (!self::exists($options['pid'])) $closed = 1;
				}
				else {
					$abort = $buffer === false ? 0 : 1;
					break;
				}
			}
			else {
				if ($fail) $fail = 0;
				if ($options['print']){
					print($buffer);
					if (in_array($options['print'], [2, 3])) flush();
				}
				if ($callback && $callback($buffer) === false){
					$abort = 2;
					break;
				}
			}
			if (connection_aborted() && !$ignore_user_abort){
				$abort = -2;
				break;
			}
			if (!$closed && ($fail || $seekable)) usleep($options['delay_ms'] * 1000);
		}
		if ($fopen) fclose($pipe);
		if ($options['print'] >= 2) static::ob_end(1, 0);
		if (!$ignore_user_abort) ignore_user_abort(0);
		return true;
	}
}